import tkinter as tk
from tkinter import ttk, messagebox
import random
import string

def generate_password():
    """
    Generates a random password based on the selected length and character types,
    and displays it in the password_entry widget.
    """
    try:
        length = int(length_entry.get())
        if length <= 0:
            messagebox.showerror("Invalid Length", "Password length must be a positive number.")
            return
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter a valid number for password length.")
        return

    characters = ""
    if lowercase_var.get():
        characters += string.ascii_lowercase
    if uppercase_var.get():
        characters += string.ascii_uppercase
    if digits_var.get():
        characters += string.digits
    if symbols_var.get():
        characters += string.punctuation

    if not characters:
        messagebox.showerror("No Character Types Selected", "Please select at least one character type.")
        return

    password = ''.join(random.choice(characters) for i in range(length))
    password_entry.config(state=tk.NORMAL)  # Enable entry to clear and insert
    password_entry.delete(0, tk.END)
    password_entry.insert(0, password)
    password_entry.config(state=tk.READONLY)  # Make entry read-only again

def copy_to_clipboard():
    """
    Copies the generated password to the user's clipboard.
    """
    password = password_entry.get()
    if password:
        root.clipboard_clear()
        root.clipboard_append(password)
        messagebox.showinfo("Copied!", "Password copied to clipboard.")
    else:
        messagebox.showwarning("No Password", "No password generated to copy.")


# --- Main Application Window Setup ---
root = tk.Tk()
root.title("Random Password Generator")
root.geometry("450x350") # Set a default window size
root.resizable(False, False) # Keep it simple, prevent resizing

# Configure styles for ttk widgets
style = ttk.Style()
style.configure("TFrame", background="#f0f0f0")
style.configure("TLabel", background="#f0f0f0", font=("Inter", 10))
style.configure("TCheckbutton", background="#f0f0f0", font=("Inter", 10))
style.configure("TButton", font=("Inter", 10, "bold"), padding=6)


# --- Input Frame ---
input_frame = ttk.Frame(root, padding="20")
input_frame.pack(pady=10, padx=20, fill="x")

# Password Length
length_label = ttk.Label(input_frame, text="Password Length:")
length_label.grid(row=0, column=0, sticky="w", pady=5, padx=5)
length_entry = ttk.Entry(input_frame, width=10, font=("Inter", 10))
length_entry.insert(0, "12") # Default length
length_entry.grid(row=0, column=1, sticky="ew", pady=5, padx=5)


# Character Type Checkbuttons
# Variables to hold the state of checkboxes
lowercase_var = tk.BooleanVar(value=True)
uppercase_var = tk.BooleanVar(value=True)
digits_var = tk.BooleanVar(value=True)
symbols_var = tk.BooleanVar(value=False) # Symbols off by default for simplicity

ttk.Checkbutton(input_frame, text="Include Lowercase (a-z)", variable=lowercase_var).grid(row=1, column=0, columnspan=2, sticky="w", pady=2, padx=5)
ttk.Checkbutton(input_frame, text="Include Uppercase (A-Z)", variable=uppercase_var).grid(row=2, column=0, columnspan=2, sticky="w", pady=2, padx=5)
ttk.Checkbutton(input_frame, text="Include Digits (0-9)", variable=digits_var).grid(row=3, column=0, columnspan=2, sticky="w", pady=2, padx=5)
ttk.Checkbutton(input_frame, text="Include Symbols (!@#$)", variable=symbols_var).grid(row=4, column=0, columnspan=2, sticky="w", pady=2, padx=5)


# --- Generate Button ---
generate_button = ttk.Button(root, text="Generate Password", command=generate_password)
generate_button.pack(pady=10, padx=20, fill="x")

# --- Display Password Entry ---
password_label = ttk.Label(root, text="Generated Password:")
password_label.pack(pady=(10, 0), padx=20, anchor="w")

password_entry = ttk.Entry(root, width=50, font=("Inter", 12), state=tk.READONLY)
password_entry.pack(pady=5, padx=20, fill="x")

# --- Copy Button ---
copy_button = ttk.Button(root, text="Copy to Clipboard", command=copy_to_clipboard)
copy_button.pack(pady=5, padx=20, fill="x")


# Start the Tkinter event loop
root.mainloop()
